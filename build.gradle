/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'
}

subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testCompile "org.mockito:mockito-core:2.+"
	    // GSON library, use to parse json string
        implementation 'org.json:json:20180813'
        implementation 'com.google.code.gson:gson:2.8.6'
        // https://mvnrepository.com/artifact/org.postgresql/postgresql
        compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'

    }
    
    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }

        report{
            xml = true
            html = true
        }
    }

    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
}

clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }

        report{
            xml = true
            html = true
        }
}

// Project specific stuff
project (':shared'){
}

project (':server'){
    dependencies {
        implementation project(':shared')
    }
}

project (':client'){
    dependencies {
        implementation project(':shared')
    } 
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
        }
    }
}
